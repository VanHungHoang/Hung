{"version":3,"file":"frontendMain.js","sources":["webpack:///./Client/frontend/calendar/calendar.utils.ts","webpack:///./Client/frontend/assets/prev-512.png","webpack:///./Client/frontend/assets/next-512.png","webpack:///./Client/frontend/images/icons/file_icon@1x.png","webpack:///./Client/frontend/main.ts","webpack:///./Client/frontend/styles.scss","webpack:///./Client/frontend/calendar/calendar.ts","webpack:///./Client/frontend/calendar/calendar.header.ts","webpack:///./Client/frontend/calendar/calendar.body.ts","webpack:///./Client/frontend/calendar/calendar.body.small.ts"],"sourcesContent":["\r\n\r\n\r\nexport class ViewCell{\r\n    date: Date;\r\n    dateNumber: number;\r\n    dateString: string;\r\n    isToday: boolean;\r\n    inMonth: boolean;\r\n    isWeekend: boolean;\r\n}\r\n\r\n\r\nexport function addDays(\r\n    dirtyDate: Date,\r\n    amount: number\r\n): Date {\r\n    let date = new Date(dirtyDate);\r\n    date.setDate(date.getDate() + amount);\r\n    return date;\r\n}\r\n\r\nexport function startOfWeek(\r\n    dirtyDate: Date,\r\n    dirtyOptions?: {\r\n        weekStartsOn?: number\r\n    }\r\n): Date {\r\n    let weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;\r\n\r\n    let date = new Date(dirtyDate);\r\n    let day = date.getDay();\r\n    let diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\r\n\r\n    date.setDate(date.getDate() - diff);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n}\r\n\r\nexport function startOfMonth(\r\n    dirtyDate: Date\r\n): Date {\r\n    let date = new Date(dirtyDate);\r\n    date.setDate(1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n}\r\n\r\nexport function endOfWeek(\r\n    dirtyDate: Date,\r\n    dirtyOptions?: {\r\n        weekStartsOn?: number\r\n    }\r\n): Date {\r\n    let weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0\r\n\r\n    let date = new Date(dirtyDate);\r\n    let day = date.getDay();\r\n    let diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\r\n\r\n    date.setDate(date.getDate() + diff);\r\n    date.setHours(23, 59, 59, 999);\r\n    return date;\r\n}\r\n\r\nexport function endOfMonth(\r\n    dirtyDate: Date\r\n): Date {\r\n    let date = new Date(dirtyDate);\r\n    let month = date.getMonth();\r\n    date.setFullYear(date.getFullYear(), month + 1, 0);\r\n    date.setHours(23, 59, 59, 999);\r\n    return date;\r\n}\r\n\r\nexport function startOfDay(\r\n    dirtyDate: Date\r\n): Date {\r\n    let date = new Date(dirtyDate);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n}\r\n\r\nexport function isSameDay(\r\n    dirtyDateLeft: Date,\r\n    dirtyDateRight: Date\r\n): boolean {\r\n    let dateLeft = startOfDay(new Date(dirtyDateLeft));\r\n    let dateRight = startOfDay(new Date(dirtyDateRight));\r\n    return dateLeft.getTime() === dateRight.getTime();\r\n}\r\n\r\nexport function compareAsc(\r\n    dirtyDateLeft: Date,\r\n    dirtyDateRight: Date\r\n): number {\r\n    let dateLeft = new Date(dirtyDateLeft);\r\n    let timeLeft = dateLeft.getTime();\r\n    let dateRight = new Date(dirtyDateRight);\r\n    let timeRight = dateRight.getTime();\r\n\r\n    if (timeLeft < timeRight) {\r\n        return -1;\r\n    } else if (timeLeft > timeRight) {\r\n        return 1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function differenceInDays(\r\n    dirtyDateLeft: Date,\r\n    dirtyDateRight: Date\r\n): number {\r\n    let dateLeft = new Date(dirtyDateLeft);\r\n    let dateRight = new Date(dirtyDateRight);\r\n\r\n    let sign = compareAsc(dateLeft, dateRight);\r\n    let difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\r\n    dateLeft.setDate(dateLeft.getDate() - sign * difference);\r\n\r\n    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n    // If so, result must be decreased by 1 in absolute value\r\n    let isLastDayNotFull = (compareAsc(dateLeft, dateRight) === -sign) ? 1 : 0;\r\n    return sign * (difference - isLastDayNotFull);\r\n}\r\n\r\nexport function differenceInCalendarDays(\r\n    dateLeft: Date,\r\n    dateRight: Date\r\n): number {\r\n    let MILLISECONDS_IN_MINUTE = 60000;\r\n    let MILLISECONDS_IN_DAY = 86400000;\r\n    let startOfDayLeft = startOfDay(dateLeft)\r\n    let startOfDayRight = startOfDay(dateRight)\r\n\r\n    let timestampLeft = startOfDayLeft.getTime() -\r\n        startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\r\n    let timestampRight = startOfDayRight.getTime() -\r\n        startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE\r\n\r\n    // Round the number of days to the nearest integer\r\n    // because the number of milliseconds in a day is not constant\r\n    // (e.g. it's different in the day of the daylight saving time clock shift)\r\n    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\r\n}\r\n\r\nexport function isSameMonth(\r\n    dirtyDateLeft: Date,\r\n    dirtyDateRight: Date\r\n): boolean {\r\n    let dateLeft = new Date(dirtyDateLeft);\r\n    let dateRight = new Date(dirtyDateRight);\r\n    let u = (dateLeft.getFullYear() === dateRight.getFullYear() &&\r\n    dateLeft.getMonth() === dateRight.getMonth())\r\n    return u;\r\n}\r\n\r\n\r\n\r\nexport interface GetViewCellArgs {\r\n    viewDate: Date;\r\n    weekStartsOn: number;\r\n    viewStart?: Date;\r\n    viewEnd?: Date;\r\n    weekendDays?: number[];\r\n}\r\n\r\n\r\nexport function getViewCell({\r\n    viewDate,\r\n    weekStartsOn,\r\n    viewStart = startOfMonth(viewDate),\r\n    viewEnd = endOfMonth(viewDate),\r\n    weekendDays=[]\r\n}: GetViewCellArgs): ViewCell[] {\r\n\r\n    \r\n    const start: Date = startOfWeek(viewStart, { weekStartsOn });\r\n    const end: Date = endOfWeek(viewEnd, { weekStartsOn });\r\n    \r\n    const initialViewCell: ViewCell[] = [];\r\n    let previousDate: Date;\r\n    let numberDay: number = differenceInDays(end, start) + 1;\r\n    for (let i: number = 0; i < numberDay; i++) {\r\n        let date: Date = addDays(start, i);\r\n        let cell: ViewCell = new ViewCell();\r\n        cell.inMonth = isSameMonth(date, viewDate);\r\n        cell.date = date;\r\n        cell.dateNumber = date.getDate();\r\n        cell.dateString = date.getFullYear()+ \"-\"+ date.getMonth() + \"-\"+date.getDate();\r\n        cell.isToday = isSameDay(date, viewDate);\r\n        if(weekendDays.some( w=> w == date.getDay())){\r\n            cell.isWeekend = true;\r\n        }\r\n        else {\r\n            cell.isWeekend = false;\r\n        }\r\n        initialViewCell.push(cell);\r\n    }\r\n    \r\n    return initialViewCell;\r\n}\r\n\r\nexport function getSmallViewRow({\r\n    viewDate,\r\n    weekendDays\r\n}: {\r\n        viewDate: Date,\r\n        weekendDays?: number[]\r\n    }): ViewCell[] {\r\n\r\n\r\n    const start: Date = startOfMonth(viewDate);\r\n    const end: Date = endOfMonth(viewDate);\r\n\r\n    const initialViewCell: ViewCell[] = [];\r\n    let previousDate: Date;\r\n    let numberDay: number = differenceInDays(end, start) + 1;\r\n    for (let i: number = 0; i < numberDay; i++) {\r\n        let date: Date = addDays(start, i);\r\n        let cell: ViewCell = new ViewCell();\r\n        cell.inMonth = isSameMonth(date, viewDate);\r\n        cell.date = date;\r\n        cell.dateNumber = date.getDate();\r\n        cell.dateString = date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate();\r\n        cell.isToday = isSameDay(date, viewDate);\r\n        if (weekendDays.some(w => w == date.getDay())) {\r\n            cell.isWeekend = true;\r\n        }\r\n        else {\r\n            cell.isWeekend = false;\r\n        }\r\n        initialViewCell.push(cell);\r\n    }\r\n\r\n    return initialViewCell;\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/calendar/calendar.utils.ts","module.exports = __webpack_public_path__ + \"assets/Client/frontend/assets/prev-512.a64133a3450d58ad6067.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/frontend/assets/prev-512.png\n// module id = 2\n// module chunks = 1","module.exports = __webpack_public_path__ + \"assets/Client/frontend/assets/next-512.d02ea12d65ac06c8e75e.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/frontend/assets/next-512.png\n// module id = 3\n// module chunks = 1","module.exports = __webpack_public_path__ + \"assets/Client/frontend/images/icons/file_icon@1x.7228bd1a2409ced345fd.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/frontend/images/icons/file_icon@1x.png\n// module id = 4\n// module chunks = 1","// Imports global styles\r\nimport './styles.scss';\r\nimport 'dropzone/dist/dropzone.css';\r\nimport * as $ from 'jquery';\r\nimport 'mustache/mustache';\r\nimport 'dropzone/dist/dropzone';\r\nimport MeetingBooking from './booking/booking.form';\r\nimport Calendar from './calendar/calendar';\r\nimport { Settings, Labels } from './app';\r\n\r\ndeclare var AppSetting: object;\r\nexport let appSettings: Settings;\r\n\r\ndeclare var AllLabels: object;\r\nexport let allLabels: Labels;\r\n\r\n//$(document).ready(function () {\r\n//    let setting = new Settings();\r\n//    $.extend(true, setting, AppSetting);\r\n//    appSettings = setting;\r\n//    new MeetingBooking('#main-app');\r\n//});\r\n\r\n$(function () {\r\n    //let setting = new Settings();\r\n    //$.extend(true, setting, AppSetting);\r\n    //appSettings = setting;\r\n\r\n    //let labels = new Labels();\r\n    //$.extend(true, labels, AllLabels);\r\n    //allLabels = labels;\r\n     \r\n    //new MeetingBooking('#main-app');\r\n    new Calendar('.calendar .calendar-wrapper');\r\n});\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/main.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/frontend/styles.scss\n// module id = 522\n// module chunks = 2","import * as $ from 'jquery';\r\nimport CalendarHeader from \"./calendar.header\";\r\nimport CalendarBody from \"./calendar.body\";\r\nimport { ITimeZone, IFcEvent, IScheduleEvent } from \"./calendar.model\";\r\nimport CalendarBodySmall from \"./calendar.body.small\";\r\n\r\ndeclare var timezones: Array<ITimeZone>;\r\n\r\nexport default class Calendar {\r\n    $container: JQuery;\r\n\r\n    $header: JQuery;\r\n\r\n    $body: JQuery;\r\n\r\n    header: CalendarHeader;\r\n\r\n    body: any;\r\n\r\n    date: Date;\r\n\r\n    parent: any;\r\n\r\n    timeZones: Array<ITimeZone>;\r\n\r\n    fcEvents: IFcEvent[];\r\n\r\n    schedules: IScheduleEvent[];\r\n\r\n    canNext: boolean = true;\r\n\r\n    isSmallView: boolean = true;\r\n\r\n    dayOfWeeks: string[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thurday', 'Friday', 'Saturday'];\r\n\r\n\r\n    constructor(selector, date?: Date, parent?: any) {\r\n        if (!selector || selector == undefined)\r\n            return;\r\n        if (parent) {\r\n            this.parent = parent;\r\n        }\r\n        this.$container = $(selector);\r\n        this.timeZones = timezones;\r\n        this.date = date || new Date();\r\n        this.init();\r\n\r\n    }\r\n\r\n    generateHtml(): void {\r\n        let header = document.createElement('div');\r\n        header.className = 'calendar-header direction';\r\n        this.$container.append(header);\r\n        let body = document.createElement('div');\r\n        body.className = 'calendar-body view';\r\n        this.$container.append(body);\r\n\r\n        this.$header = $(header);\r\n        this.$body = $(body);\r\n    }\r\n\r\n    init(): void {\r\n        this.generateHtml();\r\n        this.getCalendarData();\r\n        this.header = new CalendarHeader(this.$header, this);\r\n        $(window).width() <= 768 ? this.isSmallView = true : this.isSmallView = false;\r\n        this.renderBody();\r\n        $(window).on('resize', () => this.windowOnRezie());\r\n    }\r\n\r\n    windowOnRezie(): void {\r\n        this.getCalendarData();\r\n        let isSmallView: boolean = false;\r\n        if ($(window).width() <= 768) {\r\n            isSmallView = true;\r\n        }\r\n        if (isSmallView != this.isSmallView) {\r\n            this.isSmallView = isSmallView;\r\n            this.renderBody();\r\n        }\r\n    }\r\n\r\n    renderBody(): void {\r\n        if (this.isSmallView)\r\n            this.body = new CalendarBodySmall(this.$body, this);\r\n        else {\r\n            this.body = new CalendarBody(this.$body, this);\r\n        }\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* change date after press next button or previous button\r\n    /**********************************************************************/\r\n    changeDate(date: Date) {\r\n        this.date = date;\r\n        this.getCalendarData();\r\n        this.renderBody();\r\n        this.header.addEventListenersAfterChangeDate();\r\n    }\r\n\r\n    changeTimeZone(timeZoneId: string) {\r\n        console.log('new-timezone');\r\n    }\r\n\r\n    \r\n    getCalendarData(): void {\r\n\r\n        // let schedules;\r\n        // $.ajax({\r\n        //     url: '/api/',\r\n        //     type: 'get',\r\n        //     dataType: \"json\",\r\n        //     data: {\r\n\r\n        //     },\r\n        //     success: function(result){\r\n        //         schedules = result;\r\n        //     }\r\n        // });\r\n        // this.schedules = schedules;\r\n\r\n        this.schedules = [\r\n            {\r\n                id: 1,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: true,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            },\r\n            {\r\n                id: 2,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: false,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            },\r\n            {\r\n                id: 3,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: true,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            },            {\r\n                id: 4,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: true,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            },\r\n            {\r\n                id: 5,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: false,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            },\r\n            {\r\n                id: 6,\r\n                duration: 60,\r\n                startTime: new Date(),\r\n                isAvailable: true,\r\n                isDeleted: false,\r\n                companyCode: \"test\"\r\n            }\r\n        ];\r\n\r\n        this.fcEvents = [\r\n            {\r\n                id: 1,\r\n                startDate: new Date(2017,9,6),\r\n                title: 'fc event abc',\r\n                typeColor: 'blue',\r\n                typeName: 'Financial Broad'\r\n            },\r\n            {\r\n                id: 2,\r\n                startDate: new Date(2017,9,6),\r\n                title: 'fc event abc',\r\n                typeColor: 'yellow',\r\n                typeName: 'Financial New'\r\n            },\r\n            {\r\n                id: 3,\r\n                startDate: new Date(2017,9,6),\r\n                title: 'fc event abc',\r\n                typeColor: 'blue',\r\n                typeName: 'Financial Broad'\r\n            },\r\n            {\r\n                id: 4,\r\n                startDate: new Date(),\r\n                title: 'fc event abc',\r\n                typeColor: 'blue',\r\n                typeName: 'Financial New'\r\n            },\r\n            {\r\n                id: 5,\r\n                startDate: new Date(),\r\n                title: 'fc event abc',\r\n                typeColor: 'yellow',\r\n                typeName: 'Financial New'\r\n            },\r\n            {\r\n                id: 6,\r\n                startDate: new Date(),\r\n                title: 'fc event abc',\r\n                typeColor: 'green',\r\n                typeName: 'Result'\r\n            }\r\n        ]\r\n\r\n        this.canNext = true;\r\n    }\r\n\r\n    selectedSchedule(schedule: IScheduleEvent) {\r\n        if (this.parent) {\r\n            this.parent.calendarCallBack(schedule);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/calendar/calendar.ts","\r\nimport * as $ from 'jquery';\r\nimport { ITimeZone } from \"./calendar.model\";\r\nimport * as Mustache from 'mustache';\r\nimport Calendar from \"./calendar\";\r\nimport { appSettings } from \"../main\";\r\n\r\nclass LabelDate {\r\n    longMonth: string[] = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octorber\", \"December\"];\r\n    sortMonth: string[] = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Dec\"];\r\n}\r\n\r\nexport default class CalendarHeader {\r\n\r\n    $container: JQuery;\r\n\r\n    timeZones: ITimeZone[];\r\n\r\n    date: Date;\r\n\r\n    parent: Calendar;\r\n\r\n    fullDateFormat: string;\r\n\r\n    labelDate: LabelDate;\r\n\r\n    constructor($container: JQuery, parent: Calendar) {\r\n        this.$container = $container;\r\n        this.parent = parent;\r\n        this.timeZones = parent.timeZones;\r\n        //this.fullDateFormat = appSettings.fullDateFormat;\r\n        this.date = parent.date || new Date();\r\n        this.init();\r\n    }\r\n\r\n    init(): void {\r\n        this.display();\r\n        this.addEventListeners();\r\n    }\r\n\r\n    display(): void {\r\n        var template = $('#fullCalendarHeader').html();\r\n        Mustache.parse(template);  \r\n        let header = {\r\n            selectedDate: this.date,\r\n            timeZones: this.timeZones,\r\n            selectedTimeZone: this.timeZones[0]\r\n        }\r\n        var html = Mustache.to_html(template, header);\r\n        this.$container.append(html);\r\n    }\r\n\r\n    changeTimeZone(): void{\r\n\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* \r\n    /**********************************************************************/\r\n    nextClick(): void{\r\n        let desiredMonth= this.date.getMonth() + 1;\r\n        let dateWithDesiredMonth = new Date(this.date.getFullYear(), desiredMonth, 1);\r\n        this.date = dateWithDesiredMonth;\r\n        this.changeDate();\r\n        let $btnPrev = $('.btn-prev', this.$container);\r\n        if($btnPrev.hasClass('disable')){\r\n            $btnPrev.removeClass('disable').bind('click', (e)=>this.previousClick(e));\r\n        }\r\n        \r\n    }\r\n\r\n    previousClick(e): void {\r\n        let $btnPrev = $(e.target).parents('.btn-prev');\r\n        let dateToday = new Date();\r\n        let desiredMonth= this.date.getMonth() - 1;\r\n        let dateWithDesiredMonth = new Date(this.date.getFullYear(), desiredMonth, 1);\r\n\r\n        this.date = dateWithDesiredMonth;\r\n        this.changeDate();\r\n\r\n        if(dateToday.getMonth() == desiredMonth){\r\n            $btnPrev.addClass('disable');\r\n            $btnPrev.unbind('click');\r\n        }\r\n    }\r\n\r\n    changeDate(){\r\n        this.parent.changeDate(this.date);\r\n        $('.selected-date', this.$container).html(this.date.toString());\r\n    }\r\n\r\n    timeZoneClick(): void {\r\n        let $parent = $(this).parents('.timezone-dropdown');\r\n        if ($parent.hasClass('show-dropdown')) {\r\n            $parent.removeClass('show-dropdown');\r\n        }\r\n        else {\r\n            $parent.addClass('show-dropdown');\r\n        }\r\n    }\r\n\r\n    selectTimeZone(): void{\r\n        let $this = $(this);\r\n        let $parent = $this.parents('.timezone-dropdown');\r\n        let timeZoneID = $this.attr('time-zone');\r\n        let timeZoneName = $this.text();\r\n        let $btnTimeZone= $('.btn-timezone', $parent);\r\n        $btnTimeZone.text(timeZoneName);\r\n        $btnTimeZone.attr('time-zone',timeZoneID)\r\n        $parent.removeClass('show-dropdown');\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* Check can next status\r\n    /* if it is false, unbind click event of the button next\r\n    /**********************************************************************/\r\n    addEventListenersAfterChangeDate(){\r\n        if(!this.parent.canNext){\r\n            let $btnNext = $('.btn-next', this.$container);\r\n            $btnNext.unbind('click');\r\n            $btnNext.addClass('disable');\r\n        }\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* Add event after render html\r\n    /**********************************************************************/\r\n    addEventListeners(): void{\r\n        let btnNext = $('.btn-next', this.$container);\r\n        if (btnNext != undefined && this.parent.canNext) {\r\n            btnNext.bind('click', ()=>this.nextClick());\r\n        }\r\n        else {\r\n            throw new Error(\"Method not implemented.\");\r\n        }\r\n\r\n        let btnPrev = $('.btn-prev', this.$container);\r\n        if (btnPrev != undefined) {\r\n            let currDate = new Date();\r\n            if(currDate.getFullYear() == this.date.getFullYear() &&  currDate.getMonth() == this.date.getMonth()){\r\n                if(!btnPrev.hasClass('disable'))\r\n                    btnPrev.addClass('disable');\r\n            }\r\n            else {\r\n                btnPrev.removeClass('disable');\r\n                btnPrev.bind('click', (e)=>this.previousClick(e))\r\n            }\r\n            \r\n        }\r\n        else {\r\n            throw new Error(\"Method not implemented.\");\r\n        }\r\n        $('.btn-timezone', this.$container).bind('click', this.timeZoneClick);\r\n        $('a.timezone-item', this.$container).bind('click', this.selectTimeZone);\r\n        \r\n    }\r\n\r\n    formatDate(date: Date, format: string) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/calendar/calendar.header.ts","import * as $ from 'jquery';\r\nimport { IFcEvent, IScheduleEvent } from \"./calendar.model\";\r\nimport Calendar from \"./calendar\";\r\n\r\nimport * as Mustache from 'mustache';\r\nimport { ViewCell, getViewCell } from \"./calendar.utils\";\r\n\r\nexport default class CalendarBody {\r\n\r\n    startOfWeek: number = 0;\r\n\r\n    weekendDays: number[] = [0, 6];\r\n\r\n    $container: JQuery;\r\n\r\n    date: Date;\r\n\r\n    parent: Calendar;\r\n\r\n    $header: JQuery;\r\n\r\n    $body: JQuery;\r\n\r\n    $footer: JQuery;\r\n\r\n    viewCells: ViewCell[];\r\n\r\n    constructor($container: JQuery, parent: Calendar) {\r\n        this.$container = $container;\r\n        this.parent = parent;\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.generateHtml();\r\n        this.displayCalendar();\r\n    }\r\n\r\n    generateHtml(): void {         /*Generate Html for CalendarBody */\r\n        this.$container.html($('#fullCalendarBody').html());\r\n        this.$header = $('.view-header', this.$container);\r\n        this.$body = $('.view-body', this.$container);\r\n        this.$footer = $('.view-footer', this.$container);\r\n    }\r\n\r\n    displayCalendar() {   /* display Calendar and add Event into CalendarBody */\r\n        this.renderHeader();\r\n        this.renderBody();\r\n        this.applyScheduleEvent();\r\n        this.applyFcEvents();\r\n    }\r\n\r\n    renderHeader() {    /* Render part Header of CalendarBody */\r\n        let rowHeader = document.createElement('div');\r\n        rowHeader.className = 'view-row view-header-row';\r\n        let start: number = this.startOfWeek;\r\n        let dayOfWeeks: string[] = this.parent.dayOfWeeks;\r\n\r\n        for (let i: number = 0; i < 7; i++) {\r\n            let viewCell = document.createElement('div');\r\n            let item: number = (start + i >= 7) ? (start + i - 7) : (start + i);\r\n            viewCell.innerText = dayOfWeeks[item];\r\n            if (this.weekendDays.some(e => e == item))\r\n                viewCell.className = 'view-row-cell cal-weekend';\r\n            else\r\n                viewCell.className = 'view-row-cell';\r\n\r\n            rowHeader.appendChild(viewCell);\r\n        }\r\n        this.$header.html('');\r\n        this.$header.append(rowHeader);\r\n    }\r\n\r\n    renderBody() {     /* Render part Body of CalendarBody */\r\n        this.getViewCell(this.parent.date);\r\n        let numberWeekInView = Math.round(this.viewCells.length / 7);\r\n        for (let i: number = 0; i < numberWeekInView; i++) {\r\n            let bodyRow = document.createElement('div');\r\n            bodyRow.className = 'view-row';\r\n            bodyRow.innerHTML = this.renderBodyRow(i);\r\n            this.$body.append(bodyRow);\r\n            \r\n            let listItem = $('.view-row-cell', bodyRow);\r\n            $('.view-row-cell', bodyRow).each(function(){\r\n                console.log($(this).index(listItem));\r\n            })\r\n        }\r\n    }\r\n\r\n    renderBodyRow(start: number): string {   /*Render rows of Body */\r\n        let itemStart = start * 7;\r\n        let html = '';\r\n        let template = $('#fullCalendarCell').html();\r\n        for (let i = itemStart; i < itemStart + 7; i++) {\r\n            Mustache.parse(template);\r\n            html += Mustache.to_html(template, this.viewCells[i]);\r\n        }\r\n        return html;\r\n    }\r\n\r\n    getViewCell(viewDate: Date) {\r\n        let date: Date = new Date();\r\n        if (date.getFullYear() == viewDate.getFullYear() && date.getMonth() == viewDate.getMonth()) {\r\n            this.viewCells = getViewCell({\r\n                viewDate: date,\r\n                weekStartsOn: this.startOfWeek,\r\n                weekendDays: this.weekendDays\r\n            });\r\n        } else{\r\n            this.viewCells = getViewCell({\r\n                viewDate: this.parent.date,\r\n                weekStartsOn: this.startOfWeek,\r\n                weekendDays: this.weekendDays\r\n            });\r\n        }\r\n    }\r\n\r\n    applyScheduleEvent() {      /*Add Schedules data into cells of body*/\r\n        let $schedule: JQuery;\r\n        let $scheduleBottom: JQuery;\r\n        \r\n        let scheduleLength = this.parent.schedules.length;\r\n        let $divMoreSchedule = document.createElement('div');\r\n        $divMoreSchedule.className = 'schedule-more';\r\n        let $divArrowSchedule = document.createElement('div');\r\n        $divArrowSchedule.className = 'schedule-arrow-down';\r\n        $divMoreSchedule.appendChild($divArrowSchedule);    \r\n        if (scheduleLength > 3) {\r\n            for(let i = 0; i< scheduleLength; i++){\r\n                let getMonth = this.parent.schedules[i].startTime.getMonth();\r\n                let stringDate = this.parent.schedules[i].startTime.getFullYear() + \"-\" + getMonth + \"-\" + this.parent.schedules[i].startTime.getDate();\r\n                let stringSelector = '.view-body .view-row .view-row-cell[date=\"' + stringDate + '\"]';\r\n                let $selectCell: JQuery = $(stringSelector);\r\n                $scheduleBottom = $('.view-cell-bottom', $selectCell);\r\n                $schedule = $('.view-cell-bottom .schedule-events', $selectCell);\r\n                $scheduleBottom.addClass('has-schedule-more');\r\n                $schedule.addClass(' has-schedule-events');\r\n                let div\r\n                if ($schedule.length == 1) {                    \r\n                                       \r\n                    let $item = document.createElement('div');\r\n                    $item.className = 'schedule-events-item' + (this.parent.schedules[i].isAvailable ? ' schedule-available' : '');\r\n                    $item.setAttribute('schedule-id', this.parent.schedules[i].id.toString());\r\n                    let displayHourstartTime = this.parent.schedules[i].startTime.getHours();\r\n                    let displayMinutesstartTime = this.parent.schedules[i].startTime.getMinutes().toString();\r\n                    if (displayHourstartTime > 12) {\r\n                        displayHourstartTime = displayHourstartTime - 12;\r\n                    }\r\n                    $item.innerText += displayHourstartTime.toString() + ':' + displayMinutesstartTime;\r\n                    if (this.parent.schedules[i].isAvailable) {\r\n                        $item.innerText += \" Available\";\r\n                    } else {\r\n                        $item.innerText += \" Reserved\";\r\n                    }   \r\n                    \r\n                    $schedule.append($item); \r\n                    if(i>2){\r\n                        $item.className +=' item-more'; \r\n                        $($item).hide();\r\n                        // $schedule.append($divMoreSchedule);\r\n                        $scheduleBottom.append($divMoreSchedule);\r\n                    }\r\n                    if (this.parent.schedules[i].isAvailable)\r\n                        $item.addEventListener('click', () => this.scheduleAvailableClick(this.parent.schedules[i]))\r\n                }\r\n            }\r\n        } \r\n        else {\r\n            this.parent.schedules.forEach(event => {\r\n            let getMonth = event.startTime.getMonth();\r\n            let stringDate = event.startTime.getFullYear() + \"-\" + getMonth + \"-\" + event.startTime.getDate();\r\n            let stringSelector = '.view-body .view-row .view-row-cell[date=\"' + stringDate + '\"]';\r\n            let $selectCell: JQuery = $(stringSelector);\r\n            $schedule = $('.view-cell-bottom .schedule-events', $selectCell);\r\n            $schedule.addClass(' has-schedule-events');\r\n            if ($schedule.length == 1) {\r\n                let $item = document.createElement('div');\r\n                $item.className = 'schedule-events-item' + (event.isAvailable ? ' schedule-available' : '');\r\n                $item.setAttribute('schedule-id', event.id.toString());\r\n                let displayHourstartTime = event.startTime.getHours();\r\n                let displayMinutesstartTime = event.startTime.getMinutes().toString();\r\n                if (displayHourstartTime > 12) {\r\n                    displayHourstartTime = displayHourstartTime - 12;\r\n                }\r\n                $item.innerText += displayHourstartTime.toString() + ':' + displayMinutesstartTime;\r\n                if (event.isAvailable) {\r\n                    $item.innerText += \" Available\";\r\n                } else {\r\n                    $item.innerText += \" Reserved\";\r\n                }\r\n                $schedule.append($item);\r\n                if (event.isAvailable)\r\n                    $item.addEventListener('click', () => this.scheduleAvailableClick(event))\r\n            }\r\n            });\r\n        }\r\n        $('.schedule-more .schedule-arrow-down').mouseover(   /*when hover will display PopUp Fincalendars*/\r\n            function () {       \r\n                $('.schedule-events-item').show();\r\n                $('.has-schedule-events').css({'box-shadow': '5px 2px 2px 2px #888888','text-align':'center'})\r\n                $(this).hide();\r\n            }            \r\n        );  \r\n        $('.schedule-events.has-schedule-events').mouseleave(\r\n             function () {\r\n                $('.item-more').hide()\r\n                $('.has-schedule-events').css({'box-shadow': '0px 0px 0px 0px #888888'})\r\n                $('.schedule-more .schedule-arrow-down').show();\r\n            }\r\n        )\r\n    }\r\n\r\n    applyFcEvents() {   /*Add Fincalendars data into cells of body*/\r\n        let $arrowPopup = document.createElement('div');\r\n        $arrowPopup.className = \"arrowPopup\";\r\n        let $popupFc = document.createElement('div');\r\n        $popupFc.className = \"list-fc-events\";\r\n        let $ulPopupFc = document.createElement('ul');\r\n        $popupFc.appendChild($ulPopupFc);\r\n        var $fincalendar: JQuery;\r\n        var $liPopupFc;\r\n        let fcEventlength = this.parent.fcEvents.length;\r\n        if (fcEventlength > 3) {\r\n            for (let i = 0; i < 3; i++) {\r\n                let getMonth = this.parent.fcEvents[i].startDate.getMonth();\r\n                let stringDate = this.parent.fcEvents[i].startDate.getFullYear() + \"-\" + getMonth + \"-\" + this.parent.fcEvents[i].startDate.getDate();\r\n                let stringSelector = '.view-body .view-row .view-row-cell[date=\"' + stringDate + '\"]';\r\n                let $selectCell: JQuery = $(stringSelector);\r\n                $fincalendar = $('.view-cell-top .fc-events', $selectCell);\r\n                if ($fincalendar.length == 1) {\r\n                    let $item = document.createElement('div');\r\n                    $item.className = 'list-type-fc-event-item';\r\n                    $($item).css(\"background-color\", this.parent.fcEvents[i].typeColor);\r\n                    $item.setAttribute('fc-id', this.parent.fcEvents[i].id.toString());\r\n                    $fincalendar.append($item);\r\n\r\n                    $liPopupFc = document.createElement('li');\r\n                    $liPopupFc.className = \"list-fc-events-item\";\r\n                    let $divfcEventPopupTop = document.createElement('div');\r\n                    $divfcEventPopupTop.className = \"fc-event-top\";\r\n                    let $divfcEventType = document.createElement('div');\r\n                    $divfcEventType.className = \"fc-event-type\";\r\n                    $($divfcEventType).css(\"background-color\", this.parent.fcEvents[i].typeColor);\r\n                    let $divfcEventStartDate = document.createElement('div');\r\n                    $divfcEventStartDate.className = \"fc-event-start-date\";\r\n                    $divfcEventStartDate.innerText = this.parent.fcEvents[i].startDate.toString();\r\n                    $divfcEventPopupTop.appendChild($divfcEventType);\r\n                    $divfcEventPopupTop.appendChild($divfcEventStartDate);\r\n                    let $divfcEventPopupBottom = document.createElement('div');\r\n                    $divfcEventPopupBottom.className = \"fc-event-bottom\";\r\n                    let $divfcEventTitle = document.createElement('div');\r\n                    $divfcEventTitle.className = \"fc-event-title\";\r\n                    $divfcEventTitle.innerText = this.parent.fcEvents[i].title;\r\n\r\n                    $divfcEventPopupBottom.appendChild($divfcEventTitle);\r\n                    $liPopupFc.appendChild($divfcEventPopupTop);\r\n                    $liPopupFc.appendChild($divfcEventPopupBottom);\r\n                    $ulPopupFc.appendChild($liPopupFc);\r\n                    $popupFc.appendChild($ulPopupFc);\r\n\r\n                }\r\n            }\r\n            $(\".fc-events\").hover(   /*when hover will display PopUp Fincalendars*/\r\n                function (e) {\r\n                    $($fincalendar).append($arrowPopup);\r\n                    $($fincalendar).append($popupFc);\r\n                }\r\n                // , function () {\r\n                //     $(this).find(\".list-fc-events\").remove();\r\n                //     $(this).find(\".arrowPopup\").remove();\r\n                // }\r\n            );\r\n            let $popupViewMore = document.createElement('div');\r\n            $popupViewMore.className = 'view-more';\r\n            $popupViewMore.innerText = 'view more>>';\r\n            $ulPopupFc.appendChild($popupViewMore);\r\n        } else {\r\n            this.parent.fcEvents.forEach(event => {\r\n                let getMonth = event.startDate.getMonth();\r\n                let stringDate = event.startDate.getFullYear() + \"-\" + getMonth + \"-\" + event.startDate.getDate();\r\n                let stringSelector = '.view-body .view-row .view-row-cell[date=\"' + stringDate + '\"]';\r\n                let $selectCell: JQuery = $(stringSelector);\r\n                let $fincalendar: JQuery = $('.view-cell-top .fc-events', $selectCell);\r\n                if ($fincalendar.length == 1) {\r\n                    let $item = document.createElement('div');\r\n                    $item.className = 'list-type-fc-event-item';\r\n                    $($item).css(\"background-color\", event.typeColor);\r\n                    $item.setAttribute('fc-id', event.id.toString());\r\n                    $fincalendar.append($item);\r\n\r\n                    let $liPopupFc = document.createElement('li');\r\n                    $liPopupFc.className = \"list-fc-events-item\";\r\n                    let $divfcEventPopupTop = document.createElement('div');\r\n                    $divfcEventPopupTop.className = \"fc-event-top\";\r\n                    let $divfcEventType = document.createElement('div');\r\n                    $divfcEventType.className = \"fc-event-type\";\r\n                    $($divfcEventType).css(\"background-color\", event.typeColor);\r\n                    let $divfcEventStartDate = document.createElement('div');\r\n                    $divfcEventStartDate.className = \"fc-event-start-date\";\r\n                    $divfcEventStartDate.innerText = event.startDate.toString();\r\n                    $divfcEventPopupTop.appendChild($divfcEventType);\r\n                    $divfcEventPopupTop.appendChild($divfcEventStartDate);\r\n                    let $divfcEventPopupBottom = document.createElement('div');\r\n                    $divfcEventPopupBottom.className = \"fc-event-bottom\";\r\n                    let $divfcEventTitle = document.createElement('div');\r\n                    $divfcEventTitle.className = \"fc-event-title\";\r\n                    $divfcEventTitle.innerText = event.title;\r\n\r\n                    $divfcEventPopupBottom.appendChild($divfcEventTitle);\r\n                    $liPopupFc.appendChild($divfcEventPopupTop);\r\n                    $liPopupFc.appendChild($divfcEventPopupBottom);\r\n\r\n                    $(\".fc-events\").hover(\r\n                        function () {\r\n                            $ulPopupFc.appendChild($liPopupFc);\r\n                            $popupFc.appendChild($ulPopupFc);\r\n                            $($popupFc).css(\"top\", \"50px\");\r\n                            $($fincalendar).append($arrowPopup);\r\n                            $($fincalendar).append($popupFc);\r\n                        }\r\n                        // , function () {\r\n                        //     $(this).find(\".list-fc-events\").remove();\r\n                        //     $(this).find(\".arrowPopup\").remove();\r\n                        // }\r\n                    );\r\n                };\r\n            })\r\n        }\r\n    }\r\n\r\n    scheduleAvailableClick(event: IScheduleEvent) {\r\n        //this.checkScheduleStatus(event.id);\r\n        console.log(event);\r\n    }\r\n\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/calendar/calendar.body.ts","\r\nimport * as $ from 'jquery';\r\nimport * as Mustache from 'mustache';\r\nimport Calendar from \"./calendar\";\r\nimport { ViewCell, getSmallViewRow } from \"./calendar.utils\";\r\nimport { IScheduleEvent, IFCType } from \"./calendar.model\";\r\n\r\nexport default class CalendarBodySmall {\r\n\r\n    startOfWeek: number = 0;\r\n\r\n    weekendDays: number[] = [0, 6];\r\n\r\n    $container: JQuery;\r\n\r\n    date: Date;\r\n\r\n    parent: Calendar;\r\n\r\n    $body: JQuery;\r\n\r\n    $footer: JQuery;\r\n\r\n    viewCells: ViewCell[];\r\n\r\n    dateShortName: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n    fcTypes: IFCType[] = [];\r\n\r\n    constructor($container: JQuery, parent: Calendar) {\r\n        this.$container = $container;\r\n        this.parent = parent;\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.generateHtml();\r\n        this.displayCalendar();\r\n    }\r\n\r\n    generateHtml() {\r\n        this.$container.html($('#smallCalendarBody').html());\r\n        this.$body = $('.view-body', this.$container);\r\n        this.$footer = $('.view-footer', this.$container);\r\n    }\r\n    displayCalendar() {\r\n        this.renderBody();\r\n        this.renderFooter();\r\n        this.applySchedules();\r\n        //this.applyFCEventTypes();\r\n    }\r\n\r\n    renderBody() {\r\n        this.getViewCell();\r\n        let numberDayInMonth = this.viewCells.length;\r\n        let template = $('#smallCalendarBodyRow').html();\r\n        if (numberDayInMonth > 0) {\r\n            this.$body.html('');\r\n            for (let i: number = 0; i < numberDayInMonth; i++) {\r\n                let cell: ViewCell = this.viewCells[i];\r\n                Mustache.parse(template);\r\n                let htmlRow = Mustache.to_html(template, {\r\n                    isToday: cell.isToday,\r\n                    isWeekend: cell.isWeekend,\r\n                    dateString: cell.dateString,\r\n                    dateNumber: cell.date.getDate(),\r\n                    dateShortString: this.dateShortName[cell.date.getDay()]\r\n                })\r\n\r\n                this.$body.append(htmlRow);\r\n            }\r\n        }\r\n        else {\r\n            //do something\r\n        }\r\n    }\r\n\r\n    renderFooter(): void {\r\n        this.getFCEventType();\r\n        if(this.fcTypes.length > 0){\r\n            let $ul = document.createElement('ul');\r\n            this.fcTypes.forEach( fctype => {\r\n                let $li = document.createElement('li');\r\n                $li.className = \"fc-type-item\";\r\n\r\n                let $divColor = document.createElement('div');\r\n                $divColor.setAttribute('style', \"background-color: \"+fctype.typeColor);\r\n                $divColor.className=\"fc-type-item-color\";\r\n                $li.appendChild($divColor);\r\n\r\n                let $divName = document.createElement('div');\r\n                $divName.className=\"fc-type-item-name\";\r\n                $divName.innerText = fctype.typeName;\r\n                $li.appendChild($divName);\r\n\r\n                $ul.appendChild($li);\r\n            })\r\n            this.$footer.append($ul);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* add schedules into cell of body\r\n    /**********************************************************************/\r\n    applySchedules(): void {\r\n\r\n        this.parent.schedules.forEach(schedule => {\r\n            let stringDate = schedule.startTime.getFullYear() + \"-\" + schedule.startTime.getMonth() + \"-\" + schedule.startTime.getDate();\r\n            let strSelector = '.view-body .view-body-row[date=\"' + stringDate + '\"]';\r\n            let $selectCell: JQuery = $(strSelector);\r\n            let $schedule: JQuery = $('.col-schedule-inner', $selectCell);\r\n\r\n            let item = document.createElement('div');\r\n            item.className = 'schedule-item' + (schedule.isAvailable ? ' schedule-available' : ' schedule-reserved');\r\n            item.innerText = schedule.startTime.getHours() + ':' + schedule.startTime.getMinutes();\r\n            $schedule.append(item);\r\n            if (schedule.isAvailable) {\r\n                item.addEventListener('click', () => this.selectScheduleAvailable(schedule));\r\n            }\r\n        });\r\n    }\r\n\r\n    applyFCEventTypes(): void {\r\n        if (this.parent.fcEvents.length > 0) {\r\n            this.parent.fcEvents.forEach(event => {\r\n                let stringDate = event.startDate.getFullYear() + \"-\" + event.startDate.getMonth() + \"-\" + event.startDate.getDate();\r\n                let strSelector = '.view-body .view-body-row[date=\"' + stringDate + '\"]';\r\n                let $selectRow: JQuery = $(strSelector);\r\n            })\r\n        }\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* get types in list FCEvents \r\n    /**********************************************************************/\r\n    getFCEventType(): void {\r\n\r\n        this.parent.fcEvents.forEach(event => {\r\n            if (!this.fcTypes.some(fct => fct.typeColor === event.typeColor)) {\r\n                console.log(event.typeColor);\r\n                this.fcTypes.push({\r\n                    typeName: event.typeName,\r\n                    typeColor: event.typeColor\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    getViewCell() {\r\n        this.viewCells = getSmallViewRow({\r\n            viewDate: this.parent.date,\r\n            weekendDays: this.weekendDays\r\n        });\r\n    }\r\n\r\n    /**********************************************************************/\r\n    /* event when select schedule in calendar\r\n    /**********************************************************************/\r\n    selectScheduleAvailable(schedule: IScheduleEvent) {\r\n        this.parent.selectedSchedule(schedule);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/frontend/calendar/calendar.body.small.ts"],"mappings":";A;;;;;;;;AAGA;AAAA;AAOA;AAAA;AAAA;AAPA;AAUA;AAIA;AACA;AACA;AACA;AAPA;AASA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAfA;AAiBA;AAGA;AACA;AACA;AACA;AACA;AAPA;AASA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAfA;AAiBA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAGA;AACA;AACA;AACA;AANA;AAQA;AAIA;AACA;AACA;AACA;AAPA;AASA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAhBA;AAkBA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;AAsBA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAeA;AAEA;AACA;AAjCA;AAmCA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAeA;AAEA;AACA;AAjCA;;;;;;;;AC5MA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AClCA;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAIA;AA4BA;AAPA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;AChOA;AAEA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAchKA;AAIA;AACA;AAEA;AAoBA;AAlBA;AAEA;AAirCA;AAAA;AAqsBA;AApBA;AAEA;AAcsourceRoot":""}