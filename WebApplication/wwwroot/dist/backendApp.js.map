{"version":3,"file":"backendApp.js","sources":["webpack:///./Client/backend/app/shared/shared.module.ts","webpack:///./Client lazy","webpack:///./Client/backend/app/shared/services/translation.service.ts","webpack:///./Client/backend/app/core/services/ApiOriginUri.ts","webpack:///./Client/backend/app/core/services/data.service.ts","webpack:///./Client/backend/app/core/services/utility.service.ts","webpack:///./Client/backend/app/home/home.component.ts","webpack:///./Client/backend/main.ts","webpack:///./Client/backend/styles/vendor.css","webpack:///./Client/backend/app/app.module.ts","webpack:///./Client/backend/app/app.component.ts","webpack:///./Client/backend/app/app.component.html","webpack:///./Client/backend/app/nav.component.ts","webpack:///./Client/backend/app/nav.component.html","webpack:///./Client/backend/app/app.routes.ts","webpack:///./Client/backend/app/core/services/data-service-options.ts","webpack:///./Client/backend/app/core/core.module.ts","webpack:///./Client/backend/app/core/strategies/ExtHashLocationStrategy.ts","webpack:///./Client/backend/app/core/strategies/StatelessRouteReuseStrategy.ts","webpack:///./Client/backend/app/shared/services/api-translation-loader.service.ts","webpack:///./Client/backend/app/home/home.module.ts","webpack:///./Client/backend/app/home/home.routes.ts","webpack:///./Client/backend/app/home/home.component.html","webpack:///./Client/backend/app/home/home.component.scss","webpack:///./Client/backend/environments/environment.ts"],"sourcesContent":["// What is core module: https://angular.io/guide/ngmodule#the-core-module\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpModule } from '@angular/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { TranslationService } from './services/translation.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        HttpModule,\r\n        FormsModule,\r\n        TranslateModule,\r\n        ReactiveFormsModule,\r\n        RouterModule\r\n    ],\r\n    exports: [\r\n        CommonModule,\r\n        HttpModule,\r\n        FormsModule,\r\n        TranslateModule,\r\n        ReactiveFormsModule,\r\n        RouterModule\r\n    ],\r\n    declarations:[],\r\n    providers: []\r\n})\r\n\r\nexport class SharedModule {\r\n    /**\r\n     * forRoot\r\n     * Referent: https://angular.io/guide/ngmodule#configure-core-services-with-coremoduleforroot\r\n     */\r\n    public static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: SharedModule,\r\n            providers: [ TranslationService ]\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/shared/shared.module.ts","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 118;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client lazy\n// module id = 118\n// module chunks = 1","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { ApiOriginUri } from '../../core/services/ApiOriginUri';\r\nimport { DataService } from '../../core/services/data.service';\r\n\r\n@Injectable()\r\nexport class TranslationService {\r\n    constructor(private apiUri: ApiOriginUri, private dataService: DataService){}\r\n\r\n    get(twoLetterLanguage?: string): Observable<Response>{\r\n        return this.dataService.get(this.apiUri.API_ORIGIN_URI + '/Translation', { lang: twoLetterLanguage || 'en' });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/shared/services/translation.service.ts","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ApiOriginUri {\r\n    constructor(){ }\r\n\r\n    /**\r\n     * Gets current Uri to the API host\r\n     */\r\n    get API_ORIGIN_URI(): string {\r\n        return window['__apiUri__'];\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/services/ApiOriginUri.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions, RequestMethod, URLSearchParams } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport { UtilityService } from './utility.service';\r\nimport { DataServiceOptions } from './data-service-options';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    // Define the internal Subject we'll use to push the command count\r\n    public pendingCommandsSubject = new Subject<number>();\r\n    public pendingCommandCount = 0;\r\n\r\n    // Provide the *public* Observable that clients can subscribe to\r\n    public pendingCommands$: Observable<number>;\r\n\r\n    constructor(public http: Http, public us: UtilityService) {\r\n        this.pendingCommands$ = this.pendingCommandsSubject.asObservable();\r\n    }\r\n\r\n    // I perform a GET request to the API, appending the given params\r\n    // as URL search parameters. Returns a stream.\r\n    public get(url: string, params?: any): Observable<Response> {\r\n        const options = new DataServiceOptions();\r\n        options.method = RequestMethod.Get;\r\n        options.url = url;\r\n        options.params = params;\r\n        return this.request(options);\r\n    }\r\n\r\n    // I perform a POST request to the API. If both the params and data\r\n    // are present, the params will be appended as URL search parameters\r\n    // and the data will be serialized as a JSON payload. If only the\r\n    // data is present, it will be serialized as a JSON payload. Returns\r\n    // a stream.\r\n    public post(url: string, data?: any, params?: any): Observable<Response> {\r\n        if (!data) {\r\n            data = params;\r\n            params = {};\r\n        }\r\n        const options = new DataServiceOptions();\r\n        options.method = RequestMethod.Post;\r\n        options.url = url;\r\n        options.params = params;\r\n        options.data = data;\r\n        return this.request(options);\r\n    }\r\n\r\n    public put(url: string, data?: any, params?: any): Observable<Response> {\r\n        if (!data) {\r\n            data = params;\r\n            params = {};\r\n        }\r\n        const options = new DataServiceOptions();\r\n        options.method = RequestMethod.Put;\r\n        options.url = url;\r\n        options.params = params;\r\n        options.data = data;\r\n        return this.request(options);\r\n    }\r\n\r\n    public delete(url: string): Observable<Response> {\r\n        const options = new DataServiceOptions();\r\n        options.method = RequestMethod.Delete;\r\n        options.url = url;\r\n        return this.request(options);\r\n    }\r\n\r\n    private request(options: DataServiceOptions): Observable<any> {\r\n        options.method = (options.method || RequestMethod.Get);\r\n        options.url = (options.url || '');\r\n        options.headers = (options.headers || {});\r\n        options.params = (options.params || {});\r\n        options.data = (options.data || {});\r\n\r\n        this.interpolateUrl(options);\r\n        this.addXsrfToken(options);\r\n        this.addContentType(options);\r\n        this.addAuthToken(options);\r\n\r\n        const requestOptions = new RequestOptions();\r\n        requestOptions.method = options.method;\r\n        requestOptions.url = options.url;\r\n        requestOptions.headers = options.headers;\r\n        requestOptions.search = this.buildUrlSearchParams(options.params);\r\n        requestOptions.body = JSON.stringify(options.data);\r\n\r\n        this.pendingCommandsSubject.next(++this.pendingCommandCount);\r\n\r\n        const stream = this.http.request(options.url, requestOptions)\r\n            .catch((error: any) => {\r\n                this.handleErrors(error);\r\n                return Observable.throw(error);\r\n            })\r\n            .map(this.unwrapHttpValue)\r\n            .catch((error: any) => {\r\n                return Observable.throw(this.unwrapHttpError(error));\r\n            })\r\n            .finally(() => {\r\n                this.pendingCommandsSubject.next(--this.pendingCommandCount);\r\n            });\r\n\r\n        return stream;\r\n    }\r\n\r\n    private addContentType(options: DataServiceOptions): DataServiceOptions {\r\n        // if (options.method !== RequestMethod.Get) {\r\n        options.headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n        // }\r\n        return options;\r\n    }\r\n\r\n    private addAuthToken(options: DataServiceOptions): DataServiceOptions {\r\n        const authTokens = localStorage.getItem('auth-tokens');\r\n        if (authTokens) {\r\n            // tslint:disable-next-line:whitespace\r\n            options.headers.Authorization = 'Bearer ' + JSON.parse((<any>authTokens)).access_token;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    private extractValue(collection: any, key: string): any {\r\n        const value = collection[key];\r\n        delete (collection[key]);\r\n        return value;\r\n    }\r\n\r\n    private addXsrfToken(options: DataServiceOptions): DataServiceOptions {\r\n        const xsrfToken = this.getXsrfCookie();\r\n        if (xsrfToken) {\r\n            options.headers['X-XSRF-TOKEN'] = xsrfToken;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    private getXsrfCookie(): string {\r\n        const matches = document.cookie.match(/\\bXSRF-TOKEN=([^\\s;]+)/);\r\n        try {\r\n            return matches ? decodeURIComponent(matches[1]) : '';\r\n        } catch (decodeError) {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    // private addCors(options: DataServiceOptions): DataServiceOptions {\r\n    //     options.headers['Access-Control-Allow-Origin'] = '*';\r\n    //     return options;\r\n    // }\r\n\r\n    private buildUrlSearchParams(params: any): URLSearchParams {\r\n        const searchParams = new URLSearchParams();\r\n        for (const key in params) {\r\n            if (params.hasOwnProperty(key)) {\r\n                searchParams.append(key, params[key]);\r\n            }\r\n        }\r\n        return searchParams;\r\n    }\r\n\r\n    private interpolateUrl(options: DataServiceOptions): DataServiceOptions {\r\n        options.url = options.url.replace(/:([a-zA-Z]+[\\w-]*)/g, ($0, token) => {\r\n            // Try to move matching token from the params collection.\r\n            if (options.params.hasOwnProperty(token)) {\r\n                return (this.extractValue(options.params, token));\r\n            }\r\n            // Try to move matching token from the data collection.\r\n            if (options.data.hasOwnProperty(token)) {\r\n                return (this.extractValue(options.data, token));\r\n            }\r\n            // If a matching value couldn't be found, just replace\r\n            // the token with the empty string.\r\n            return ('');\r\n        });\r\n        // Clean up any repeating slashes.\r\n        options.url = options.url.replace(/\\/{2,}/g, '/');\r\n        // Clean up any trailing slashes.\r\n        options.url = options.url.replace(/\\/+$/g, '');\r\n\r\n        return options;\r\n    }\r\n\r\n    private unwrapHttpError(error: any): any {\r\n        try {\r\n            return (error.json());\r\n        } catch (jsonError) {\r\n            return ({\r\n                code: -1,\r\n                message: 'An unexpected error occurred.'\r\n            });\r\n        }\r\n    }\r\n    private unwrapHttpValue(value: Response): any {\r\n        return (value.json());\r\n    }\r\n    private handleErrors(error: any) {\r\n        if (error.status === 401) {\r\n            sessionStorage.clear();\r\n            this.us.navigateToSignIn();\r\n        } else if (error.status === 403) {\r\n            // Forbidden\r\n            this.us.navigateToSignIn();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/services/data.service.ts","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class UtilityService {\r\n    public _router: Router;\r\n\r\n    constructor(router: Router) {\r\n        this._router = router;\r\n    }\r\n\r\n    public convertDateTime(date: Date) {\r\n        const _formattedDate = new Date(date.toString());\r\n        return _formattedDate.toDateString();\r\n    }\r\n\r\n    public navigate(path: string) {\r\n        this._router.navigate([path]);\r\n    }\r\n\r\n    public navigateToSignIn() {\r\n        this.navigate('/login');\r\n    }\r\n\r\n    public getParams() {\r\n        const searchParams = window.location.search.split('?')[1];\r\n        if (searchParams) {\r\n            const paramsObj: any = {};\r\n\r\n            searchParams.split('&').forEach(i => {\r\n                paramsObj[i.split('=')[0]] = i.split('=')[1];\r\n            });\r\n            return paramsObj;\r\n        }\r\n        return undefined;\r\n    }\r\n    public readableColumnName(columnName: string): string {\r\n        // Convert underscores to spaces\r\n        if (typeof (columnName) === 'undefined' || columnName === undefined || columnName === null) { return columnName; }\r\n\r\n        if (typeof (columnName) !== 'string') {\r\n            columnName = String(columnName);\r\n        }\r\n\r\n        return columnName.replace(/_+/g, ' ')\r\n            // Replace a completely all-capsed word with a first-letter-capitalized version\r\n            .replace(/^[A-Z]+$/, (match) => {\r\n                return ((match.charAt(0)).toUpperCase() + match.slice(1)).toLowerCase();\r\n            })\r\n            // Capitalize the first letter of words\r\n            .replace(/([\\w\\u00C0-\\u017F]+)/g, (match) => {\r\n                return (match.charAt(0)).toUpperCase() + match.slice(1);\r\n            })\r\n            // Put a space in between words that have partial capilizations (i.e. 'firstName' becomes 'First Name')\r\n            // .replace(/([A-Z]|[A-Z]\\w+)([A-Z])/g, \"$1 $2\");\r\n            // .replace(/(\\w+?|\\w)([A-Z])/g, \"$1 $2\");\r\n            .replace(/(\\w+?(?=[A-Z]))/g, '$1 ');\r\n    }\r\n\r\n    public loadStyle(link: string): Observable<any> {\r\n        if (this.isLoadedStyle(link)) {\r\n            return Observable.of('');\r\n        } else {\r\n            const head = document.getElementsByTagName('head')[0];\r\n            // Load jquery Ui\r\n            const styleNode = document.createElement('link');\r\n            styleNode.rel = 'stylesheet';\r\n            styleNode.type = 'text/css';\r\n            styleNode.href = link;\r\n            styleNode.media = 'all';\r\n            head.appendChild(styleNode);\r\n            return Observable.fromEvent(styleNode, 'load');\r\n        }\r\n    }\r\n    public loadScript(script: string): Observable<any> {\r\n        if (this.isLoadedScript(script)) {\r\n            return Observable.of('');\r\n        } else {\r\n            const head = document.getElementsByTagName('head')[0];\r\n            // Load jquery Ui\r\n            const scriptNode = document.createElement('script');\r\n            scriptNode.src = script;\r\n            scriptNode.async = false;\r\n            // scriptNode.type = 'text/javascript';\r\n            // scriptNode.charset = 'utf-8';\r\n            head.insertBefore(scriptNode, head.firstChild);\r\n            return Observable.fromEvent(scriptNode, 'load');\r\n        }\r\n    }\r\n\r\n    // Detect if library loaded\r\n    private isLoadedScript(lib: string) {\r\n        return document.querySelectorAll('[src=\"' + lib + '\"]').length > 0;\r\n    }\r\n\r\n    private isLoadedStyle(lib: string) {\r\n        return document.querySelectorAll('[href=\"' + lib + '\"]').length > 0;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/services/utility.service.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-child-home',\r\n    template: require('./home.component.html'),\r\n    styles: [require('./home.component.scss')]\r\n})\r\n\r\nexport class HomeComponent {\r\n    constructor() {}\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/home/home.component.ts","import './styles/vendor.css';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/main.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/backend/styles/vendor.css\n// module id = 181\n// module chunks = 1","import { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpModule } from '@angular/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NavComponent } from './nav.component';\r\nimport { appRouting } from './app.routes';\r\nimport { CoreModule } from './core/core.module';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { ApiTranslationLoader } from './shared/services/api-translation-loader.service';\r\nimport { HomeModule } from './home/home.module';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserAnimationsModule,\r\n        BrowserModule,\r\n        appRouting,\r\n        HttpModule,\r\n        FormsModule,\r\n        CoreModule.forRoot(),\r\n        SharedModule.forRoot(),\r\n        HomeModule,\r\n        TranslateModule.forRoot({loader: { provide: TranslateLoader, useClass: ApiTranslationLoader }})\r\n    ],\r\n    declarations: [\r\n        AppComponent,\r\n        NavComponent\r\n    ],\r\n    providers: [],\r\n    // Bootstrap simutanously both AppComponent and NavComponent\r\n    bootstrap: [ AppComponent, NavComponent ]\r\n})\r\n\r\nexport class AppModule { }\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/app.module.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'root-app',\r\n    template: require('./app.component.html')\r\n})\r\n\r\nexport class AppComponent{\r\n    constructor() { }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/app.component.ts","module.exports = \"<!-- component routing placeholder -->\\r\\n<div class=\\\"container-fluid component-placehoder\\\">\\r\\n    <div class=\\\"component-placehoder-inner\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/backend/app/app.component.html\n// module id = 195\n// module chunks = 1","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'nav-app',\r\n    template: require('./nav.component.html')\r\n})\r\n\r\nexport class NavComponent{\r\n    constructor() { }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/nav.component.ts","module.exports = \"\\r\\n<ul class='sublinks collapse in'>\\r\\n    <li class=\\\"list-group-item small\\\" routerLinkActive=\\\"active-menu\\\">\\r\\n        <a [routerLink]=\\\"['home']\\\">\\r\\n            <span class='glyphicon glyphicon-home pull-left'></span> Home\\r\\n        </a>\\r\\n    </li>\\r\\n    <li class=\\\"list-group-item small\\\" routerLinkActive=\\\"active-menu\\\">\\r\\n        <a [routerLink]=\\\"['setting']\\\">\\r\\n            <span class='glyphicon glyphicon-education pull-left'></span> Setting\\r\\n        </a>\\r\\n    </li>\\r\\n</ul>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/backend/app/nav.component.html\n// module id = 197\n// module chunks = 1","import { RouterModule, Routes, PreloadAllModules } from '@angular/router';\r\n\r\n\r\n// Core app router\r\nconst routes: Routes = [\r\n    // Redirect to Home's routing module\r\n    { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n    // Lazy async route modules\r\n    { path: 'setting', loadChildren: './setting/setting.module#SettingModule' }\r\n];\r\n\r\nexport const appRouting = RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules });\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/app.routes.ts","import { RequestMethod } from '@angular/http';\r\n\r\nexport class DataServiceOptions {\r\n    public method: RequestMethod;\r\n    public url: string;\r\n    public headers: any = {};\r\n    public params = {};\r\n    public data = {};\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/services/data-service-options.ts","// What is core module: https://angular.io/guide/ngmodule#the-core-module\r\nimport { NgModule, Optional, SkipSelf, ModuleWithProviders } from '@angular/core';\r\nimport { APP_BASE_HREF, LocationStrategy } from '@angular/common';\r\nimport { RouteReuseStrategy } from '@angular/router';\r\n\r\nimport { ExtHashLocationStrategy } from './strategies/ExtHashLocationStrategy';\r\nimport { StatelessRouteReuseStrategy } from './strategies/StatelessRouteReuseStrategy';\r\nimport { ApiOriginUri } from './services/ApiOriginUri';\r\nimport { DataService } from './services/data.service';\r\nimport { UtilityService } from './services/utility.service';\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations:[],\r\n    providers: []\r\n})\r\n\r\nexport class CoreModule {\r\n    constructor(@Optional() @SkipSelf() parentModule: CoreModule) { \r\n        // Prevent reimport of the CoreModule\r\n        if(parentModule) {\r\n            throw new Error('CoreModule is already imported. Import it in the AppModule only');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * forRoot\r\n     * Referent: https://angular.io/guide/ngmodule#configure-core-services-with-coremoduleforroot\r\n     */\r\n    public static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: CoreModule,\r\n            providers: [\r\n                ApiOriginUri,\r\n                { provide: APP_BASE_HREF, useValue: window.location.pathname },\r\n                { provide: LocationStrategy, useClass: ExtHashLocationStrategy },\r\n                { provide: RouteReuseStrategy, useClass: StatelessRouteReuseStrategy },\r\n                DataService,\r\n                UtilityService\r\n            ]\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/core.module.ts","import { HashLocationStrategy } from \"@angular/common\";\r\nexport class ExtHashLocationStrategy extends HashLocationStrategy {\r\n    prepareExternalUrl(internal: string): string {\r\n        const query = window.location.search || '';\r\n        const url = this.getBaseHref() + (query.length > 0 ? query : '') + '#' + internal + query;\r\n        return url;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/strategies/ExtHashLocationStrategy.ts","import { RouteReuseStrategy, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';\r\n\r\n/**\r\n * Class is used to prevent component/module reloading while the route is change.\r\n */\r\nexport class StatelessRouteReuseStrategy extends RouteReuseStrategy {\r\n    storedRouteHandles: { [key: string]: DetachedRouteHandle } = {};\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Determines if this route (and its subtree) should be detached to be reused later\r\n     * @param route \r\n     */\r\n    shouldDetach(route: ActivatedRouteSnapshot): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Stores the detached route\r\n     * @param route \r\n     * @param handle \r\n     */\r\n    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\r\n        this.storedRouteHandles[route.routeConfig.path] = handle;\r\n    }\r\n\r\n    /**\r\n     * Determines if this route (and its subtree) should be reattached\r\n     * @param route \r\n     */\r\n    shouldAttach(route: ActivatedRouteSnapshot): boolean {\r\n        return !!route.routeConfig && !!this.storedRouteHandles[route.routeConfig.path];\r\n    }\r\n\r\n    /**\r\n     * Retrieves the previously stored route\r\n     * @param route \r\n     */\r\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\r\n        if (!route.routeConfig)\r\n            return null;\r\n        return this.storedRouteHandles[route.routeConfig.path];\r\n    }\r\n\r\n    /**\r\n     * Determines if a route should be reused\r\n     * @param future \r\n     * @param curr \r\n     */\r\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\r\n        return curr.routeConfig == future.routeConfig;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/core/strategies/StatelessRouteReuseStrategy.ts","import { Observable } from 'rxjs/Rx';\r\nimport { Injectable } from '@angular/core';\r\nimport { \r\n    TranslateLoader, \r\n    MissingTranslationHandler, \r\n    MissingTranslationHandlerParams \r\n} from '@ngx-translate/core';\r\n\r\nimport { TranslationService } from './translation.service';\r\n\r\n@Injectable()\r\nexport class ApiTranslationLoader extends TranslateLoader {\r\n    constructor(private translationService: TranslationService){ super();}\r\n    getTranslation(lang: string): Observable<any> {\r\n        return this.translationService.get(lang);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/shared/services/api-translation-loader.service.ts","import { NgModule } from '@angular/core';\r\n\r\nimport { homeRouting } from './home.routes';\r\nimport { HomeComponent } from './home.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n    imports: [ homeRouting, SharedModule ],\r\n    declarations: [ HomeComponent ]\r\n})\r\n\r\nexport class HomeModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/home/home.module.ts","import { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home.component';\r\n\r\nconst routing: Routes = [\r\n    { path: 'home', component: HomeComponent }\r\n];\r\n\r\nexport const homeRouting = RouterModule.forChild(routing);\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/app/home/home.routes.ts","module.exports = \"<h1>Hello from API Home component</h1>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/backend/app/home/home.component.html\n// module id = 462\n// module chunks = 1","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./Client/backend/app/home/home.component.scss\n// module id = 463\n// module chunks = 1","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./Client/backend/environments/environment.ts"],"mappings":";A;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAuBA;AAAA;AAWA;AAXA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;;AAAA;AAXA;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AALA;AADA;AAEA;AADA;AAMA;AAAA;AANA;;;;;;;;;;;;;;;;;;;;ACPA;AAGA;AACA;AAAA;AAKA;AAHA;;AAEA;AACA;AACA;AACA;;;AAAA;AARA;AADA;;AACA;AASA;AAAA;AATA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAEA;AACA;AAGA;AASA;AAAA;AAAA;AAPA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnMA;AADA;AAUA;AATA;AAoMA;AAAA;AApMA;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7FA;AADA;AAIA;AAHA;AA+FA;AAAA;AA/FA;;;;;;;;;;;;;;;;;;;;ACLA;AAQA;AACA;AAAA;AADA;AANA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;ACXA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACrCA;AAOA;AACA;AAAA;AADA;AALA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AAFA;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;ACAA;AAOA;AACA;AAAA;AADA;AALA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AAFA;;;;;;;;ACPA;;;;;;;;;;ACAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACTA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AANA;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AANA;AACA;AACA;AACA;AACA;AAGA;AAAA;AADA;AAyBA;;AAAA;AAzBA;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAAA;AAAA;;AAMA;AALA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;;AAEA;AACA;AAAA;AAGA;AAAA;AAFA;;AAIA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAMA;AAGA;AAAA;AACA;AAAA;AAAA;;AAAA;AACA;AACA;AACA;AAJA;AADA;AAEA;AADA;AAKA;AAAA;AALA;;;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AAOA;AAAA;AAEA;AAFA;AALA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAFA;;;;;;;;;;;ACXA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;ACRA;;;;;;;ACAA;;;;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;A","sourceRoot":""}